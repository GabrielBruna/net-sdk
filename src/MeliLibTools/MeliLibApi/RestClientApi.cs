/* 
 * MELI Markeplace SDK
 *
 * This is a the codebase to generate a SDK for Open Platform Marketplace
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using MeliLibTools.Client;

namespace MeliLibTools.MeliLibApi
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRestClientApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Resource path GET
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resource"></param>
        /// <param name="accessToken"></param>
        /// <returns></returns>
        void ResourceGet (string resource, string accessToken);

        /// <summary>
        /// Resource path GET
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resource"></param>
        /// <param name="accessToken"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ResourceGetWithHttpInfo (string resource, string accessToken);
        /// <summary>
        /// Resourse path POST
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resource"></param>
        /// <param name="accessToken"></param>
        /// <param name="body"></param>
        /// <returns></returns>
        void ResourcePost (string resource, string accessToken, Object body);

        /// <summary>
        /// Resourse path POST
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resource"></param>
        /// <param name="accessToken"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ResourcePostWithHttpInfo (string resource, string accessToken, Object body);
        /// <summary>
        /// Resourse path PUT
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resource"></param>
        /// <param name="accessToken"></param>
        /// <param name="body"></param>
        /// <returns></returns>
        void ResourcePut (string resource, string accessToken, Object body);

        /// <summary>
        /// Resourse path PUT
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resource"></param>
        /// <param name="accessToken"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ResourcePutWithHttpInfo (string resource, string accessToken, Object body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRestClientApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Resource path GET
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resource"></param>
        /// <param name="accessToken"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ResourceGetAsync (string resource, string accessToken);

        /// <summary>
        /// Resource path GET
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resource"></param>
        /// <param name="accessToken"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ResourceGetAsyncWithHttpInfo (string resource, string accessToken);
        /// <summary>
        /// Resourse path POST
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resource"></param>
        /// <param name="accessToken"></param>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ResourcePostAsync (string resource, string accessToken, Object body);

        /// <summary>
        /// Resourse path POST
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resource"></param>
        /// <param name="accessToken"></param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ResourcePostAsyncWithHttpInfo (string resource, string accessToken, Object body);
        /// <summary>
        /// Resourse path PUT
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resource"></param>
        /// <param name="accessToken"></param>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ResourcePutAsync (string resource, string accessToken, Object body);

        /// <summary>
        /// Resourse path PUT
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resource"></param>
        /// <param name="accessToken"></param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ResourcePutAsyncWithHttpInfo (string resource, string accessToken, Object body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRestClientApi : IRestClientApiSync, IRestClientApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RestClientApi : IRestClientApi
    {
        private MeliLibTools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RestClientApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RestClientApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RestClientApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RestClientApi(String basePath)
        {
            this.Configuration = MeliLibTools.Client.Configuration.MergeConfigurations(
                MeliLibTools.Client.GlobalConfiguration.Instance,
                new MeliLibTools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new MeliLibTools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MeliLibTools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = MeliLibTools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RestClientApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RestClientApi(MeliLibTools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = MeliLibTools.Client.Configuration.MergeConfigurations(
                MeliLibTools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new MeliLibTools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MeliLibTools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = MeliLibTools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RestClientApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RestClientApi(MeliLibTools.Client.ISynchronousClient client,MeliLibTools.Client.IAsynchronousClient asyncClient, MeliLibTools.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = MeliLibTools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public MeliLibTools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public MeliLibTools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MeliLibTools.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MeliLibTools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Resource path GET 
        /// </summary>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resource"></param>
        /// <param name="accessToken"></param>
        /// <returns></returns>
        public void ResourceGet (string resource, string accessToken)
        {
             ResourceGetWithHttpInfo(resource, accessToken);
        }

        /// <summary>
        /// Resource path GET 
        /// </summary>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resource"></param>
        /// <param name="accessToken"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public MeliLibTools.Client.ApiResponse<Object> ResourceGetWithHttpInfo (string resource, string accessToken)
        {
            // verify the required parameter 'resource' is set
            if (resource == null)
                throw new MeliLibTools.Client.ApiException(400, "Missing required parameter 'resource' when calling RestClientApi->ResourceGet");

            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new MeliLibTools.Client.ApiException(400, "Missing required parameter 'accessToken' when calling RestClientApi->ResourceGet");

            MeliLibTools.Client.RequestOptions localVarRequestOptions = new MeliLibTools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = MeliLibTools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = MeliLibTools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("resource", MeliLibTools.Client.ClientUtils.ParameterToString(resource)); // path parameter
            localVarRequestOptions.QueryParameters.Add(MeliLibTools.Client.ClientUtils.ParameterToMultiMap("", "access_token", accessToken));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/{resource}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResourceGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resource path GET 
        /// </summary>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resource"></param>
        /// <param name="accessToken"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ResourceGetAsync (string resource, string accessToken)
        {
             await ResourceGetAsyncWithHttpInfo(resource, accessToken);

        }

        /// <summary>
        /// Resource path GET 
        /// </summary>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resource"></param>
        /// <param name="accessToken"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<MeliLibTools.Client.ApiResponse<Object>> ResourceGetAsyncWithHttpInfo (string resource, string accessToken)
        {
            // verify the required parameter 'resource' is set
            if (resource == null)
                throw new MeliLibTools.Client.ApiException(400, "Missing required parameter 'resource' when calling RestClientApi->ResourceGet");

            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new MeliLibTools.Client.ApiException(400, "Missing required parameter 'accessToken' when calling RestClientApi->ResourceGet");


            MeliLibTools.Client.RequestOptions localVarRequestOptions = new MeliLibTools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("resource", MeliLibTools.Client.ClientUtils.ParameterToString(resource)); // path parameter
            localVarRequestOptions.QueryParameters.Add(MeliLibTools.Client.ClientUtils.ParameterToMultiMap("", "access_token", accessToken));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/{resource}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResourceGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resourse path POST 
        /// </summary>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resource"></param>
        /// <param name="accessToken"></param>
        /// <param name="body"></param>
        /// <returns></returns>
        public void ResourcePost (string resource, string accessToken, Object body)
        {
             ResourcePostWithHttpInfo(resource, accessToken, body);
        }

        /// <summary>
        /// Resourse path POST 
        /// </summary>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resource"></param>
        /// <param name="accessToken"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public MeliLibTools.Client.ApiResponse<Object> ResourcePostWithHttpInfo (string resource, string accessToken, Object body)
        {
            // verify the required parameter 'resource' is set
            if (resource == null)
                throw new MeliLibTools.Client.ApiException(400, "Missing required parameter 'resource' when calling RestClientApi->ResourcePost");

            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new MeliLibTools.Client.ApiException(400, "Missing required parameter 'accessToken' when calling RestClientApi->ResourcePost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new MeliLibTools.Client.ApiException(400, "Missing required parameter 'body' when calling RestClientApi->ResourcePost");

            MeliLibTools.Client.RequestOptions localVarRequestOptions = new MeliLibTools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = MeliLibTools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = MeliLibTools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("resource", MeliLibTools.Client.ClientUtils.ParameterToString(resource)); // path parameter
            localVarRequestOptions.QueryParameters.Add(MeliLibTools.Client.ClientUtils.ParameterToMultiMap("", "access_token", accessToken));
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/{resource}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResourcePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resourse path POST 
        /// </summary>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resource"></param>
        /// <param name="accessToken"></param>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ResourcePostAsync (string resource, string accessToken, Object body)
        {
             await ResourcePostAsyncWithHttpInfo(resource, accessToken, body);

        }

        /// <summary>
        /// Resourse path POST 
        /// </summary>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resource"></param>
        /// <param name="accessToken"></param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<MeliLibTools.Client.ApiResponse<Object>> ResourcePostAsyncWithHttpInfo (string resource, string accessToken, Object body)
        {
            // verify the required parameter 'resource' is set
            if (resource == null)
                throw new MeliLibTools.Client.ApiException(400, "Missing required parameter 'resource' when calling RestClientApi->ResourcePost");

            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new MeliLibTools.Client.ApiException(400, "Missing required parameter 'accessToken' when calling RestClientApi->ResourcePost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new MeliLibTools.Client.ApiException(400, "Missing required parameter 'body' when calling RestClientApi->ResourcePost");


            MeliLibTools.Client.RequestOptions localVarRequestOptions = new MeliLibTools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("resource", MeliLibTools.Client.ClientUtils.ParameterToString(resource)); // path parameter
            localVarRequestOptions.QueryParameters.Add(MeliLibTools.Client.ClientUtils.ParameterToMultiMap("", "access_token", accessToken));
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/{resource}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResourcePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resourse path PUT 
        /// </summary>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resource"></param>
        /// <param name="accessToken"></param>
        /// <param name="body"></param>
        /// <returns></returns>
        public void ResourcePut (string resource, string accessToken, Object body)
        {
             ResourcePutWithHttpInfo(resource, accessToken, body);
        }

        /// <summary>
        /// Resourse path PUT 
        /// </summary>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resource"></param>
        /// <param name="accessToken"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public MeliLibTools.Client.ApiResponse<Object> ResourcePutWithHttpInfo (string resource, string accessToken, Object body)
        {
            // verify the required parameter 'resource' is set
            if (resource == null)
                throw new MeliLibTools.Client.ApiException(400, "Missing required parameter 'resource' when calling RestClientApi->ResourcePut");

            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new MeliLibTools.Client.ApiException(400, "Missing required parameter 'accessToken' when calling RestClientApi->ResourcePut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new MeliLibTools.Client.ApiException(400, "Missing required parameter 'body' when calling RestClientApi->ResourcePut");

            MeliLibTools.Client.RequestOptions localVarRequestOptions = new MeliLibTools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = MeliLibTools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = MeliLibTools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("resource", MeliLibTools.Client.ClientUtils.ParameterToString(resource)); // path parameter
            localVarRequestOptions.QueryParameters.Add(MeliLibTools.Client.ClientUtils.ParameterToMultiMap("", "access_token", accessToken));
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/{resource}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResourcePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resourse path PUT 
        /// </summary>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resource"></param>
        /// <param name="accessToken"></param>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ResourcePutAsync (string resource, string accessToken, Object body)
        {
             await ResourcePutAsyncWithHttpInfo(resource, accessToken, body);

        }

        /// <summary>
        /// Resourse path PUT 
        /// </summary>
        /// <exception cref="MeliLibTools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resource"></param>
        /// <param name="accessToken"></param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<MeliLibTools.Client.ApiResponse<Object>> ResourcePutAsyncWithHttpInfo (string resource, string accessToken, Object body)
        {
            // verify the required parameter 'resource' is set
            if (resource == null)
                throw new MeliLibTools.Client.ApiException(400, "Missing required parameter 'resource' when calling RestClientApi->ResourcePut");

            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new MeliLibTools.Client.ApiException(400, "Missing required parameter 'accessToken' when calling RestClientApi->ResourcePut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new MeliLibTools.Client.ApiException(400, "Missing required parameter 'body' when calling RestClientApi->ResourcePut");


            MeliLibTools.Client.RequestOptions localVarRequestOptions = new MeliLibTools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("resource", MeliLibTools.Client.ClientUtils.ParameterToString(resource)); // path parameter
            localVarRequestOptions.QueryParameters.Add(MeliLibTools.Client.ClientUtils.ParameterToMultiMap("", "access_token", accessToken));
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/{resource}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResourcePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
